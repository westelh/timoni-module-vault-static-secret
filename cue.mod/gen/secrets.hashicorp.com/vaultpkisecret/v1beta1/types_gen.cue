// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f vault-secrets-operator/chart/crds/secrets.hashicorp.com_vaultpkisecrets.yaml

package v1beta1

import "strings"

// VaultPKISecret is the Schema for the vaultpkisecrets API
#VaultPKISecret: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "secrets.hashicorp.com/v1beta1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "VaultPKISecret"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// VaultPKISecretSpec defines the desired state of VaultPKISecret
	spec!: #VaultPKISecretSpec
}

// VaultPKISecretSpec defines the desired state of VaultPKISecret
#VaultPKISecretSpec: {
	// AltNames to include in the request
	// May contain both DNS names and email addresses.
	altNames?: [...string]

	// Clear the Kubernetes secret when the resource is deleted.
	clear?: bool

	// CommonName to include in the request.
	commonName?: string

	// Destination provides configuration necessary for syncing the
	// Vault secret
	// to Kubernetes. If the type is set to "kubernetes.io/tls",
	// "tls.key" will
	// be set to the "private_key" response from Vault, and "tls.crt"
	// will be
	// set to "certificate" + "ca_chain" from the Vault response
	// ("issuing_ca"
	// is used when "ca_chain" is empty). The
	// "remove_roots_from_chain=true"
	// option is used with Vault to exclude the root CA from the Vault
	// response.
	destination!: {
		// Annotations to apply to the Secret. Requires Create to be set
		// to true.
		annotations?: {
			[string]: string
		}

		// Create the destination Secret.
		// If the Secret already exists this should be set to false.
		create?: bool

		// Labels to apply to the Secret. Requires Create to be set to
		// true.
		labels?: {
			[string]: string
		}

		// Name of the Secret
		name!: string

		// Overwrite the destination Secret if it exists and Create is
		// true. This is
		// useful when migrating to VSO from a previous secret deployment
		// strategy.
		overwrite?: bool

		// Transformation provides configuration for transforming the
		// secret data before
		// it is stored in the Destination.
		transformation?: {
			// ExcludeRaw data from the destination Secret. Exclusion policy
			// can be set
			// globally by including 'exclude-raw` in the
			// '--global-transformation-options'
			// command line flag. If set, the command line flag always takes
			// precedence over
			// this configuration.
			excludeRaw?: bool

			// Excludes contains regex patterns used to filter top-level
			// source secret data
			// fields for exclusion from the final K8s Secret data. These
			// pattern filters are
			// never applied to templated fields as defined in Templates. They
			// are always
			// applied before any inclusion patterns. To exclude all source
			// secret data
			// fields, you can configure the single pattern ".*".
			excludes?: [...string]

			// Includes contains regex patterns used to filter top-level
			// source secret data
			// fields for inclusion in the final K8s Secret data. These
			// pattern filters are
			// never applied to templated fields as defined in Templates. They
			// are always
			// applied last.
			includes?: [...string]

			// Templates maps a template name to its Template. Templates are
			// always included
			// in the rendered K8s Secret, and take precedence over templates
			// defined in a
			// SecretTransformation.
			templates?: {
				[string]: {
					// Name of the Template
					name?: string

					// Text contains the Go text template format. The template
					// references attributes from the data structure of the source
					// secret.
					// Refer to https://pkg.go.dev/text/template for more information.
					text!: string
				}
			}

			// TransformationRefs contain references to template configuration
			// from
			// SecretTransformation.
			transformationRefs?: [...{
				// IgnoreExcludes controls whether to use the
				// SecretTransformation's Excludes
				// data key filters.
				ignoreExcludes?: bool

				// IgnoreIncludes controls whether to use the
				// SecretTransformation's Includes
				// data key filters.
				ignoreIncludes?: bool

				// Name of the SecretTransformation resource.
				name!: string

				// Namespace of the SecretTransformation resource.
				namespace?: string

				// TemplateRefs map to a Template found in this TransformationRef.
				// If empty, then
				// all templates from the SecretTransformation will be rendered to
				// the K8s Secret.
				templateRefs?: [...{
					// KeyOverride to the rendered template in the Destination secret.
					// If Key is
					// empty, then the Key from reference spec will be used. Set this
					// to override the
					// Key set from the reference spec.
					keyOverride?: string

					// Name of the Template in SecretTransformationSpec.Templates.
					// the rendered secret data.
					name!: string
				}]
			}]
		}

		// Type of Kubernetes Secret. Requires Create to be set to true.
		// Defaults to Opaque.
		type?: string
	}

	// ExcludeCNFromSans from DNS or Email Subject Alternate Names.
	// Default: false
	excludeCNFromSans?: bool

	// ExpiryOffset to use for computing when the certificate should
	// be renewed.
	// The rotation time will be difference between the expiration and
	// the offset.
	// Should be in duration notation e.g. 30s, 120s, etc.
	expiryOffset?: =~"^([0-9]+(\\.[0-9]+)?(s|m|h))$"

	// Format for the certificate. Choices: "pem", "der",
	// "pem_bundle".
	// If "pem_bundle",
	// any private key and issuing cert will be appended to the
	// certificate pem.
	// If "der", the value will be base64 encoded.
	// Default: pem
	format?: string

	// IPSans to include in the request.
	ipSans?: [...string]

	// IssuerRef reference to an existing PKI issuer, either by
	// Vault-generated
	// identifier, the literal string default to refer to the
	// currently
	// configured default issuer, or the name assigned to an issuer.
	// This parameter is part of the request URL.
	issuerRef?: string

	// Mount for the secret in Vault
	mount!: string

	// Namespace of the secrets engine mount in Vault. If not set, the
	// namespace that's
	// part of VaultAuth resource will be inferred.
	namespace?: string

	// NotAfter field of the certificate with specified date value.
	// The value format should be given in UTC format
	// YYYY-MM-ddTHH:MM:SSZ
	notAfter?: string

	// Requested other SANs, in an array with the format
	// oid;type:value for each entry.
	otherSans?: [...string]

	// PrivateKeyFormat, generally the default will be controlled by
	// the Format
	// parameter as either base64-encoded DER or PEM-encoded DER.
	// However, this can be set to "pkcs8" to have the returned
	// private key contain base64-encoded pkcs8 or PEM-encoded
	// pkcs8 instead.
	// Default: der
	privateKeyFormat?: string

	// Revoke the certificate when the resource is deleted.
	revoke?: bool

	// Role in Vault to use when issuing TLS certificates.
	role!: string

	// RolloutRestartTargets should be configured whenever the
	// application(s) consuming the Vault secret does
	// not support dynamically reloading a rotated secret.
	// In that case one, or more RolloutRestartTarget(s) can be
	// configured here. The Operator will
	// trigger a "rollout-restart" for each target whenever the Vault
	// secret changes between reconciliation events.
	// See RolloutRestartTarget for more details.
	rolloutRestartTargets?: [...{
		// Kind of the resource
		kind!: "Deployment" | "DaemonSet" | "StatefulSet" | "argo.Rollout"

		// Name of the resource
		name!: string
	}]

	// TTL for the certificate; sets the expiration date.
	// If not specified the Vault role's default,
	// backend default, or system default TTL is used, in that order.
	// Cannot be larger than the mount's max TTL.
	// Note: this only has an effect when generating a CA cert or
	// signing a CA cert,
	// not when generating a CSR for an intermediate CA.
	// Should be in duration notation e.g. 120s, 2h, etc.
	ttl?: =~"^([0-9]+(\\.[0-9]+)?(s|m|h|d))$"

	// The requested URI SANs.
	uriSans?: [...string]

	// User ID (OID 0.9.2342.19200300.100.1.1) Subject values to be
	// placed on the
	// signed certificate.
	userIDs?: [...string]

	// VaultAuthRef to the VaultAuth resource, can be prefixed with a
	// namespace,
	// eg: `namespaceA/vaultAuthRefB`. If no namespace prefix is
	// provided it will default to
	// the namespace of the VaultAuth CR. If no value is specified for
	// VaultAuthRef the Operator
	// will default to the `default` VaultAuth, configured in the
	// operator's namespace.
	vaultAuthRef?: string
}
