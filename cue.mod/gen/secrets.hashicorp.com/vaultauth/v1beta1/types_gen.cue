// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f vault-secrets-operator/chart/crds/secrets.hashicorp.com_vaultauths.yaml

package v1beta1

import "strings"

// VaultAuth is the Schema for the vaultauths API
#VaultAuth: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "secrets.hashicorp.com/v1beta1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "VaultAuth"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// VaultAuthSpec defines the desired state of VaultAuth
	spec!: #VaultAuthSpec
}

// VaultAuthSpec defines the desired state of VaultAuth
#VaultAuthSpec: {
	// AllowedNamespaces Kubernetes Namespaces which are allow-listed
	// for use with this AuthMethod.
	// This field allows administrators to customize which Kubernetes
	// namespaces are authorized to
	// use with this AuthMethod. While Vault will still enforce its
	// own rules, this has the added
	// configurability of restricting which VaultAuthMethods can be
	// used by which namespaces.
	// Accepted values:
	// []{"*"} - wildcard, all namespaces.
	// []{"a", "b"} - list of namespaces.
	// unset - disallow all namespaces except the Operator's the
	// VaultAuthMethod's namespace, this
	// is the default behavior.
	allowedNamespaces?: [...string]

	// AppRole specific auth configuration, requires that the Method
	// be set to `appRole`.
	appRole?: {
		// RoleID of the AppRole Role to use for authenticating to Vault.
		roleId?: string

		// SecretRef is the name of a Kubernetes secret in the consumer's
		// (VDS/VSS/PKI) namespace which
		// provides the AppRole Role's SecretID. The secret must have a
		// key named `id` which holds the
		// AppRole Role's secretID.
		secretRef?: string
	}

	// AWS specific auth configuration, requires that Method be set to
	// `aws`.
	aws?: {
		// The Vault header value to include in the STS signing request
		headerValue?: string

		// The IAM endpoint to use; if not set will use the default
		iamEndpoint?: string

		// IRSAServiceAccount name to use with IAM Roles for Service
		// Accounts
		// (IRSA), and should be annotated with
		// "eks.amazonaws.com/role-arn". This
		// ServiceAccount will be checked for other EKS annotations:
		// eks.amazonaws.com/audience and
		// eks.amazonaws.com/token-expiration
		irsaServiceAccount?: string

		// AWS Region to use for signing the authentication request
		region?: string

		// Vault role to use for authenticating
		role?: string

		// SecretRef is the name of a Kubernetes Secret in the consumer's
		// (VDS/VSS/PKI) namespace
		// which holds credentials for AWS. Expected keys include
		// `access_key_id`, `secret_access_key`,
		// `session_token`
		secretRef?: string

		// The role session name to use when creating a webidentity
		// provider
		sessionName?: string

		// The STS endpoint to use; if not set will use the default
		stsEndpoint?: string
	}

	// GCP specific auth configuration, requires that Method be set to
	// `gcp`.
	gcp?: {
		// GKE cluster name. Defaults to the cluster-name returned from
		// the operator
		// pod's local metadata server.
		clusterName?: string

		// GCP project ID. Defaults to the project-id returned from the
		// operator
		// pod's local metadata server.
		projectID?: string

		// GCP Region of the GKE cluster's identity provider. Defaults to
		// the region
		// returned from the operator pod's local metadata server.
		region?: string

		// Vault role to use for authenticating
		role?: string

		// WorkloadIdentityServiceAccount is the name of a Kubernetes
		// service
		// account (in the same Kubernetes namespace as the Vault*Secret
		// referencing
		// this resource) which has been configured for workload identity
		// in GKE.
		// Should be annotated with "iam.gke.io/gcp-service-account".
		workloadIdentityServiceAccount?: string
	}

	// Headers to be included in all Vault requests.
	headers?: {
		[string]: string
	}

	// JWT specific auth configuration, requires that the Method be
	// set to `jwt`.
	jwt?: {
		// TokenAudiences to include in the ServiceAccount token.
		audiences?: [...string]

		// Role to use for authenticating to Vault.
		role?: string

		// SecretRef is the name of a Kubernetes secret in the consumer's
		// (VDS/VSS/PKI) namespace which
		// provides the JWT token to authenticate to Vault's JWT
		// authentication backend. The secret must
		// have a key named `jwt` which holds the JWT token.
		secretRef?: string

		// ServiceAccount to use when creating a ServiceAccount token to
		// authenticate to Vault's
		// JWT authentication backend.
		serviceAccount?: string

		// TokenExpirationSeconds to set the ServiceAccount token.
		tokenExpirationSeconds?: int64 & >=600
	}

	// Kubernetes specific auth configuration, requires that the
	// Method be set to `kubernetes`.
	kubernetes?: {
		// TokenAudiences to include in the ServiceAccount token.
		audiences?: [...string]

		// Role to use for authenticating to Vault.
		role?: string

		// ServiceAccount to use when authenticating to Vault's
		// authentication backend. This must reside in the consuming
		// secret's (VDS/VSS/PKI) namespace.
		serviceAccount?: string

		// TokenExpirationSeconds to set the ServiceAccount token.
		tokenExpirationSeconds?: int64 & >=600
	}

	// Method to use when authenticating to Vault.
	method?: "kubernetes" | "jwt" | "appRole" | "aws" | "gcp"

	// Mount to use when authenticating to auth method.
	mount?: string

	// Namespace to auth to in Vault
	namespace?: string

	// Params to use when authenticating to Vault
	params?: {
		[string]: string
	}

	// StorageEncryption provides the necessary configuration to
	// encrypt the client storage cache.
	// This should only be configured when client cache persistence
	// with encryption is enabled.
	// This is done by passing setting the manager's commandline
	// argument
	// --client-cache-persistence-model=direct-encrypted. Typically,
	// there should only ever
	// be one VaultAuth configured with StorageEncryption in the
	// Cluster, and it should have
	// the label: cacheStorageEncryption=true
	storageEncryption?: {
		// KeyName to use for encrypt/decrypt operations via Vault
		// Transit.
		keyName!: string

		// Mount path of the Transit engine in Vault.
		mount!: string
	}

	// VaultAuthGlobalRef.
	vaultAuthGlobalRef?: {
		// AllowDefault when set to true will use the default
		// VaultAuthGlobal resource
		// as the default if Name is not set. The 'allow-default-globals'
		// option must be
		// set on the operator's '-global-vault-auth-options' flag
		//
		// The default VaultAuthGlobal search is conditional.
		// When a ref Namespace is set, the search for the default
		// VaultAuthGlobal resource is constrained to that namespace.
		// Otherwise, the search order is:
		// 1. The default VaultAuthGlobal resource in the referring
		// VaultAuth resource's
		// namespace.
		// 2. The default VaultAuthGlobal resource in the Operator's
		// namespace.
		allowDefault?: bool

		// MergeStrategy configures the merge strategy for HTTP headers
		// and parameters
		// that are included in all Vault authentication requests.
		mergeStrategy?: {
			// Headers configures the merge strategy for HTTP headers that are
			// included in
			// all Vault requests. Choices are `union`, `replace`, or `none`.
			//
			// If `union` is set, the headers from the VaultAuthGlobal and
			// VaultAuth
			// resources are merged. The headers from the VaultAuth always
			// take precedence.
			//
			// If `replace` is set, the first set of non-empty headers taken
			// in order from:
			// VaultAuth, VaultAuthGlobal auth method, VaultGlobal default
			// headers.
			//
			// If `none` is set, the headers from the
			// VaultAuthGlobal resource are ignored and only the headers from
			// the VaultAuth
			// resource are used. The default is `none`.
			headers?: "union" | "replace" | "none"

			// Params configures the merge strategy for HTTP parameters that
			// are included in
			// all Vault requests. Choices are `union`, `replace`, or `none`.
			//
			// If `union` is set, the parameters from the VaultAuthGlobal and
			// VaultAuth
			// resources are merged. The parameters from the VaultAuth always
			// take
			// precedence.
			//
			// If `replace` is set, the first set of non-empty parameters
			// taken in order from:
			// VaultAuth, VaultAuthGlobal auth method, VaultGlobal default
			// parameters.
			//
			// If `none` is set, the parameters from the VaultAuthGlobal
			// resource are ignored
			// and only the parameters from the VaultAuth resource are used.
			// The default is
			// `none`.
			params?: "union" | "replace" | "none"
		}

		// Name of the VaultAuthGlobal resource.
		name?: =~"^([a-z0-9.-]{1,253})$"

		// Namespace of the VaultAuthGlobal resource. If not provided, the
		// namespace of
		// the referring VaultAuth resource is used.
		namespace?: =~"^([a-z0-9.-]{1,253})$"
	}

	// VaultConnectionRef to the VaultConnection resource, can be
	// prefixed with a namespace,
	// eg: `namespaceA/vaultConnectionRefB`. If no namespace prefix is
	// provided it will default to
	// the namespace of the VaultConnection CR. If no value is
	// specified for VaultConnectionRef the
	// Operator will default to the `default` VaultConnection,
	// configured in the operator's namespace.
	vaultConnectionRef?: string
}
