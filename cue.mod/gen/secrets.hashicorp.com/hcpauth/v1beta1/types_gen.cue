// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f vault-secrets-operator/chart/crds/secrets.hashicorp.com_hcpauths.yaml

package v1beta1

import "strings"

// HCPAuth is the Schema for the hcpauths API
#HCPAuth: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "secrets.hashicorp.com/v1beta1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "HCPAuth"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// HCPAuthSpec defines the desired state of HCPAuth
	spec!: #HCPAuthSpec
}

// HCPAuthSpec defines the desired state of HCPAuth
#HCPAuthSpec: {
	// AllowedNamespaces Kubernetes Namespaces which are allow-listed
	// for use with this AuthMethod.
	// This field allows administrators to customize which Kubernetes
	// namespaces are authorized to
	// use with this AuthMethod. While Vault will still enforce its
	// own rules, this has the added
	// configurability of restricting which HCPAuthMethods can be used
	// by which namespaces.
	// Accepted values:
	// []{"*"} - wildcard, all namespaces.
	// []{"a", "b"} - list of namespaces.
	// unset - disallow all namespaces except the Operator's the
	// HCPAuthMethod's namespace, this
	// is the default behavior.
	allowedNamespaces?: [...string]

	// Method to use when authenticating to Vault.
	method?: "servicePrincipal"

	// OrganizationID of the HCP organization.
	organizationID!: string

	// ProjectID of the HCP project.
	projectID!: string
	servicePrincipal?: {
		// SecretRef is the name of a Kubernetes secret in the consumer's
		// (VDS/VSS/PKI/HCP) namespace which provides the HCP
		// ServicePrincipal clientID,
		// and clientSecret.
		// The secret data must have the following structure {
		// "clientID": "clientID",
		// "clientSecret": "clientSecret",
		// }
		secretRef!: string
	}
}
