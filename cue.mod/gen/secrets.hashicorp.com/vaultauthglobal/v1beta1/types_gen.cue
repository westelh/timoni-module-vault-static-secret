// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f vault-secrets-operator/chart/crds/secrets.hashicorp.com_vaultauthglobals.yaml

package v1beta1

import "strings"

// VaultAuthGlobal is the Schema for the vaultauthglobals API
#VaultAuthGlobal: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "secrets.hashicorp.com/v1beta1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "VaultAuthGlobal"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// VaultAuthGlobalSpec defines the desired state of
	// VaultAuthGlobal
	spec!: #VaultAuthGlobalSpec
}

// VaultAuthGlobalSpec defines the desired state of
// VaultAuthGlobal
#VaultAuthGlobalSpec: {
	// AllowedNamespaces Kubernetes Namespaces which are allow-listed
	// for use with
	// this VaultAuthGlobal. This field allows administrators to
	// customize which
	// Kubernetes namespaces are authorized to reference this
	// resource. While Vault
	// will still enforce its own rules, this has the added
	// configurability of
	// restricting which VaultAuthMethods can be used by which
	// namespaces. Accepted
	// values: []{"*"} - wildcard, all namespaces. []{"a", "b"} - list
	// of namespaces.
	// unset - disallow all namespaces except the Operator's and the
	// referring
	// VaultAuthMethod's namespace, this is the default behavior.
	allowedNamespaces?: [...string]

	// AppRole specific auth configuration, requires that the Method
	// be set to `appRole`.
	appRole?: {
		// Headers to be included in all Vault requests.
		headers?: {
			[string]: string
		}

		// Mount to use when authenticating to auth method.
		mount?: string

		// Namespace to auth to in Vault
		namespace?: string

		// Params to use when authenticating to Vault
		params?: {
			[string]: string
		}

		// RoleID of the AppRole Role to use for authenticating to Vault.
		roleId?: string

		// SecretRef is the name of a Kubernetes secret in the consumer's
		// (VDS/VSS/PKI) namespace which
		// provides the AppRole Role's SecretID. The secret must have a
		// key named `id` which holds the
		// AppRole Role's secretID.
		secretRef?: string
	}

	// AWS specific auth configuration, requires that Method be set to
	// `aws`.
	aws?: {
		// The Vault header value to include in the STS signing request
		headerValue?: string

		// Headers to be included in all Vault requests.
		headers?: {
			[string]: string
		}

		// The IAM endpoint to use; if not set will use the default
		iamEndpoint?: string

		// IRSAServiceAccount name to use with IAM Roles for Service
		// Accounts
		// (IRSA), and should be annotated with
		// "eks.amazonaws.com/role-arn". This
		// ServiceAccount will be checked for other EKS annotations:
		// eks.amazonaws.com/audience and
		// eks.amazonaws.com/token-expiration
		irsaServiceAccount?: string

		// Mount to use when authenticating to auth method.
		mount?: string

		// Namespace to auth to in Vault
		namespace?: string

		// Params to use when authenticating to Vault
		params?: {
			[string]: string
		}

		// AWS Region to use for signing the authentication request
		region?: string

		// Vault role to use for authenticating
		role?: string

		// SecretRef is the name of a Kubernetes Secret in the consumer's
		// (VDS/VSS/PKI) namespace
		// which holds credentials for AWS. Expected keys include
		// `access_key_id`, `secret_access_key`,
		// `session_token`
		secretRef?: string

		// The role session name to use when creating a webidentity
		// provider
		sessionName?: string

		// The STS endpoint to use; if not set will use the default
		stsEndpoint?: string
	}

	// DefaultAuthMethod to use when authenticating to Vault.
	defaultAuthMethod?: "kubernetes" | "jwt" | "appRole" | "aws" | "gcp"

	// DefaultMount to use when authenticating to auth method. If not
	// specified the mount of
	// the auth method configured in Vault will be used.
	defaultMount?: string

	// DefaultVaultNamespace to auth to in Vault, if not specified the
	// namespace of the auth
	// method will be used. This can be used as a default Vault
	// namespace for all
	// auth methods.
	defaultVaultNamespace?: string

	// GCP specific auth configuration, requires that Method be set to
	// `gcp`.
	gcp?: {
		// GKE cluster name. Defaults to the cluster-name returned from
		// the operator
		// pod's local metadata server.
		clusterName?: string

		// Headers to be included in all Vault requests.
		headers?: {
			[string]: string
		}

		// Mount to use when authenticating to auth method.
		mount?: string

		// Namespace to auth to in Vault
		namespace?: string

		// Params to use when authenticating to Vault
		params?: {
			[string]: string
		}

		// GCP project ID. Defaults to the project-id returned from the
		// operator
		// pod's local metadata server.
		projectID?: string

		// GCP Region of the GKE cluster's identity provider. Defaults to
		// the region
		// returned from the operator pod's local metadata server.
		region?: string

		// Vault role to use for authenticating
		role?: string

		// WorkloadIdentityServiceAccount is the name of a Kubernetes
		// service
		// account (in the same Kubernetes namespace as the Vault*Secret
		// referencing
		// this resource) which has been configured for workload identity
		// in GKE.
		// Should be annotated with "iam.gke.io/gcp-service-account".
		workloadIdentityServiceAccount?: string
	}

	// DefaultHeaders to be included in all Vault requests.
	headers?: {
		[string]: string
	}

	// JWT specific auth configuration, requires that the Method be
	// set to `jwt`.
	jwt?: {
		// TokenAudiences to include in the ServiceAccount token.
		audiences?: [...string]

		// Headers to be included in all Vault requests.
		headers?: {
			[string]: string
		}

		// Mount to use when authenticating to auth method.
		mount?: string

		// Namespace to auth to in Vault
		namespace?: string

		// Params to use when authenticating to Vault
		params?: {
			[string]: string
		}

		// Role to use for authenticating to Vault.
		role?: string

		// SecretRef is the name of a Kubernetes secret in the consumer's
		// (VDS/VSS/PKI) namespace which
		// provides the JWT token to authenticate to Vault's JWT
		// authentication backend. The secret must
		// have a key named `jwt` which holds the JWT token.
		secretRef?: string

		// ServiceAccount to use when creating a ServiceAccount token to
		// authenticate to Vault's
		// JWT authentication backend.
		serviceAccount?: string

		// TokenExpirationSeconds to set the ServiceAccount token.
		tokenExpirationSeconds?: int64 & >=600
	}

	// Kubernetes specific auth configuration, requires that the
	// Method be set to `kubernetes`.
	kubernetes?: {
		// TokenAudiences to include in the ServiceAccount token.
		audiences?: [...string]

		// Headers to be included in all Vault requests.
		headers?: {
			[string]: string
		}

		// Mount to use when authenticating to auth method.
		mount?: string

		// Namespace to auth to in Vault
		namespace?: string

		// Params to use when authenticating to Vault
		params?: {
			[string]: string
		}

		// Role to use for authenticating to Vault.
		role?: string

		// ServiceAccount to use when authenticating to Vault's
		// authentication backend. This must reside in the consuming
		// secret's (VDS/VSS/PKI) namespace.
		serviceAccount?: string

		// TokenExpirationSeconds to set the ServiceAccount token.
		tokenExpirationSeconds?: int64 & >=600
	}

	// DefaultParams to use when authenticating to Vault
	params?: {
		[string]: string
	}

	// VaultConnectionRef to the VaultConnection resource, can be
	// prefixed with a namespace,
	// eg: `namespaceA/vaultConnectionRefB`. If no namespace prefix is
	// provided it will default to
	// the namespace of the VaultConnection CR. If no value is
	// specified for VaultConnectionRef the
	// Operator will default to the `default` VaultConnection,
	// configured in the operator's namespace.
	vaultConnectionRef?: string
}
